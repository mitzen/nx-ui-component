/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'
/* Instruments */
import { searchJobAsync } from './thunks'
import { Model } from '../../../model/posting';

const initialState: Model.JobSearchSliceState = {
  searchText: "Please enter search criteria",
  jobCategory: "Category",
  jobLocation: "Location",
  jobResult: [],
  currentJobPosting: <Model.PostingInfo>{},
  pageNo: 1,
  pageSize: 10,
  status: 'idle',
}

export const jobsearchSlice = createSlice({
  name: 'jobsearch',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSearchText: (state, action: PayloadAction<string>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.searchText = action.payload
    },
    setCategory: (state, action: PayloadAction<string>) => {
      state.jobCategory = action.payload
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    setJobLocation: (state, action: PayloadAction<string>) => {
      state.jobLocation = action.payload
    },
    setSearchResult: (state, action: PayloadAction<Model.PostingInfo[]>) => {
      state.jobResult = action.payload
    },
    setCurrentJobPosting: (state, action: PayloadAction<Model.PostingInfo>) => {
      state.currentJobPosting = action.payload
    },
  },
  
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(searchJobAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(searchJobAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.jobResult = action.payload
      })
  },
})
